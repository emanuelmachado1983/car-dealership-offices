name: Maven Package build Spring Boot

on:
  push:
    branches: [ "main" ]

jobs:
  build: # se crea un job que se llama build
    runs-on: ubuntu-latest # se ejecuta en una máquina virtual con Ubuntu

    steps:
    - uses: actions/checkout@v4  # se descarga el codigo fuente en la máquina virtual
    - name: Set up JDK   # se configura Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }} # indica dónde guardar settings.xml
        #con esto se instalá java 17 en la máquina virtual

    #con lo siguiente se compila y se ejecuta Maven
    - name: Build with Maven
      run: mvn clean compile -DskipTests -B package --file pom.xml
      #el -DksipTests es para que no ejecute los tests en esta fase
      #la idea es hacer un job separado para los tests
      
  test: #se crea un job que se llama test
    runs-on: ubuntu-latest #Se ejecuta en una máquina virtual con Ubuntu.
    needs: build   # Esperar a que el build termine
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Execute tests
        run: mvn clean test

  package: #se crea un job que se llama package
    runs-on: ubuntu-latest
    needs: test   # Esperar a que los test terminen
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Package project
        run: mvn package -B --file pom.xml

  docker: #se crea un job que se llama docker
    runs-on: ubuntu-latest #Se ejecuta en una máquina virtual con Ubuntu.
    needs: package   # Esperar a que termine el job de package
    steps:
      - uses: actions/checkout@v4  #Descarga el código fuente del repositorio en la máquina virtual.
      - uses: actions/setup-java@v4  #Configura Java en la máquina virtual.
        with:
          java-version: '17'
          distribution: 'temurin'

      #Construye la imagen Docker usando el Dockerfile de mi proyecto.
      #Le asigna la etiqueta emanuelmachado1983/car-dealearship-offices-docker:${{ github.sha }}
      #(usa el hash del commit para identificar la versión).
      - name: Build Docker
        run: docker build -t emanuelmachado1983/car-dealearship-offices-docker:${{ github.sha }} .


      #Inicia sesión en Docker Hub usando las credenciales guardadas en los secrets del repositorio
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_API_PASSWORD }}

      #Sube la imagen Docker construida a Docker Hub.
      - name: Push Docker
        run: docker push emanuelmachado1983/car-dealearship-offices-docker:${{ github.sha }}

  deploy-render: #se crea un job que se llama deploy-render
    runs-on: ubuntu-latest #Se ejecuta en una máquina virtual con Ubuntu.
    needs: docker  # Esperar a que termine el job de docker
    steps:
      #se envía una solicitud POST al webhook de despliegue de Render.com
      - name: Trigger Render Deploy
        run: |
          DEPLOY_URL="${{ secrets.RENDER_DEPLOY_HOOK_URL }}&imgURL=docker.io%2Femanuelmachado1983%2Fcar-dealearship-offices-docker%3A${{ github.sha }}"
          curl -X POST "$DEPLOY_URL"

      - name: Esperar despliegue en Render
        run: sleep 60
      - name: Verificar que el servidor está alive (reintentos)
        run: |
          for i in {1..5}; do
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://car-dealearship-offices-docker-latest.onrender.com/)
            if [ "$RESPONSE" -eq 200 ]; then
              echo "✅ El servidor está alive y responde correctamente."
              exit 0
            fi
            echo "Intento $i fallido. Código HTTP: $RESPONSE. Reintentando en 20 segundos..."
            sleep 20
          done
          echo "❌ El servidor no está alive después de 5 intentos. Último código HTTP: $RESPONSE"
          exit 1
